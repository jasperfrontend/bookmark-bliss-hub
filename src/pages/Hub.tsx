
import React, { useState, useMemo, useEffect } from 'react';
import { useBookmarks } from '@/hooks/useBookmarks';
import { useSmartCollections } from '@/hooks/useSmartCollections';
import { useCompactMode } from '@/hooks/useCompactMode';
import { Header } from '@/components/Header';
import { BookmarkTable } from '@/components/BookmarkTable';
import { BookmarkCard } from '@/components/BookmarkCard';
import { BookmarkDialog } from '@/components/BookmarkDialog';
import { SmartCollectionEditDialog } from '@/components/SmartCollectionEditDialog';
import { CollectionCard } from '@/components/CollectionCard';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Trash2, Clock, Star, Shuffle, Brain } from 'lucide-react';
import { useNavigate, useSearchParams } from 'react-router-dom';

interface Bookmark {
  id: string;
  title: string;
  url: string;
  description?: string;
  favicon_url?: string;
  tags: string[];
  is_favorite: boolean;
  created_at: string;
  last_visited_at?: string;
}

const Hub: React.FC = () => {
  const { bookmarks, loading, handleDelete, handleBulkDelete, handleToggleFavorite, handleSave, handleUpdateLastVisited, fetchBookmarks } = useBookmarks();
  const { smartCollections, loading: collectionsLoading, deleteSmartCollection, updateSmartCollection, saveAutoGeneratedCollection } = useSmartCollections(bookmarks);
  const { compactMode, setCompactMode } = useCompactMode();
  const [selectedBookmarks, setSelectedBookmarks] = useState<string[]>([]);
  const [oldBookmarksDays, setOldBookmarksDays] = useState<string>('100');
  const [searchQuery, setSearchQuery] = useState('');
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingBookmark, setEditingBookmark] = useState<Bookmark | null>(null);
  const [isCollectionEditDialogOpen, setIsCollectionEditDialogOpen] = useState(false);
  const [editingCollection, setEditingCollection] = useState<{ id: string; title: string } | null>(null);
  
  const navigate = useNavigate();
  const [searchParams, setSearchParams] = useSearchParams();

  // Get expanded collections from URL parameters
  const expandedCollections = useMemo(() => {
    const expanded = searchParams.get('expanded');
    if (!expanded) return new Set<string>();
    return new Set(expanded.split(',').filter(Boolean));
  }, [searchParams]);

  // Function to update expanded collections in URL
  const updateExpandedCollections = (collectionId: string, isExpanded: boolean) => {
    const newExpanded = new Set(expandedCollections);
    
    if (isExpanded) {
      newExpanded.add(collectionId);
    } else {
      newExpanded.delete(collectionId);
    }

    const expandedArray = Array.from(newExpanded);
    const newParams = new URLSearchParams(searchParams);
    
    if (expandedArray.length > 0) {
      newParams.set('expanded', expandedArray.join(','));
    } else {
      newParams.delete('expanded');
    }
    
    setSearchParams(newParams, { replace: true });
  };

  // Debounced redirect to search when searchQuery changes
  useEffect(() => {
    if (!searchQuery.trim()) return;

    const delayedSearch = setTimeout(() => {
      navigate(`/search?q=${encodeURIComponent(searchQuery.trim())}`);
    }, 1000);

    return () => clearTimeout(delayedSearch);
  }, [searchQuery, navigate]);

  // Get recent bookmarks (last 5)
  const recentBookmarks = useMemo(() => {
    return [...bookmarks]
      .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())
      .slice(0, 5);
  }, [bookmarks]);

  // Get forgotten bookmarks based on last_visited_at instead of created_at
  const forgottenBookmarks = useMemo(() => {
    const days = parseInt(oldBookmarksDays);
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - days);
    
    return bookmarks
      .filter(bookmark => {
        // If never visited, use created_at date
        const lastVisitedDate = bookmark.last_visited_at 
          ? new Date(bookmark.last_visited_at) 
          : new Date(bookmark.created_at);
        return lastVisitedDate < cutoffDate;
      })
      .sort((a, b) => {
        const aDate = a.last_visited_at ? new Date(a.last_visited_at) : new Date(a.created_at);
        const bDate = b.last_visited_at ? new Date(b.last_visited_at) : new Date(b.created_at);
        return aDate.getTime() - bDate.getTime(); // Oldest first
      })
      .slice(0, 12); // Limit to 12 bookmarks
  }, [bookmarks, oldBookmarksDays]);

  // Get one random bookmark
  const randomBookmark = useMemo(() => {
    if (bookmarks.length === 0) return null;
    const randomIndex = Math.floor(Math.random() * bookmarks.length);
    return bookmarks[randomIndex];
  }, [bookmarks]);

  const handleBulkDeleteSelected = () => {
    handleBulkDelete(selectedBookmarks);
    setSelectedBookmarks([]);
  };

  const handleEdit = (bookmark: Bookmark) => {
    setEditingBookmark(bookmark);
    setIsDialogOpen(true);
  };

  const handleBookmarkSave = async (bookmark: Bookmark) => {
    await handleSave(bookmark);
    setIsDialogOpen(false);
    setEditingBookmark(null);
  };

  const handleEditCollection = async (collectionId: string, newTitle: string) => {
    // Check if this is an auto-generated collection
    const isAutoGenerated = collectionId.startsWith('auto-');
    
    if (isAutoGenerated) {
      // Find the auto-generated collection
      const collection = smartCollections.find(c => c.id === collectionId);
      if (collection) {
        // Save it to the database first
        const savedId = await saveAutoGeneratedCollection(collection);
        if (savedId) {
          // Now update the title of the saved collection
          await updateSmartCollection(savedId, newTitle);
        }
      }
    } else {
      // It's already a saved collection, just update it
      const collection = smartCollections.find(c => c.id === collectionId);
      if (collection) {
        setEditingCollection({ id: collectionId, title: collection.title });
        setIsCollectionEditDialogOpen(true);
      }
    }
  };

  const handleDeleteCollection = async (collectionId: string) => {
    // Check if this is an auto-generated collection
    const isAutoGenerated = collectionId.startsWith('auto-');
    
    if (isAutoGenerated) {
      // For auto-generated collections, we need to save it first and then delete it
      const collection = smartCollections.find(c => c.id === collectionId);
      if (collection) {
        const savedId = await saveAutoGeneratedCollection(collection);
        if (savedId) {
          await deleteSmartCollection(savedId);
        }
      }
    } else {
      // It's already a saved collection, just delete it
      await deleteSmartCollection(collectionId);
    }
  };

  const handleCollectionSave = async (collectionId: string, newTitle: string) => {
    await updateSmartCollection(collectionId, newTitle);
    setIsCollectionEditDialogOpen(false);
    setEditingCollection(null);
  };

  // Add keyboard shortcut handler
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.altKey && event.key === 'a') {
        event.preventDefault();
        setIsDialogOpen(true);
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, []);

  if (loading || collectionsLoading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        <Header 
          onAddBookmark={() => setIsDialogOpen(true)}
          searchQuery={searchQuery}
          onSearchChange={setSearchQuery}
          viewMode="grid"
          compactMode={compactMode}
          onCompactModeChange={setCompactMode}
          bookmarkCount={bookmarks.length}
          favoritesCount={bookmarks.filter(b => b.is_favorite).length}
        />
        <div className="container mx-auto px-4 py-8">
          <div className="flex items-center justify-center py-12">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <TooltipProvider>
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        <Header 
          onAddBookmark={() => setIsDialogOpen(true)}
          searchQuery={searchQuery}
          onSearchChange={setSearchQuery}
          viewMode="grid"
          compactMode={compactMode}
          onCompactModeChange={setCompactMode}
          bookmarkCount={bookmarks.length}
          favoritesCount={bookmarks.filter(b => b.is_favorite).length}
        />
        
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="space-y-8">
            <div className="flex items-center justify-between">
              <h1 className="text-3xl font-bold">Smart Hub</h1>
              <Badge variant="secondary" className="text-sm">
                {bookmarks.length} total bookmarks
              </Badge>
            </div>

            {/* Smart Collections Section */}
            {smartCollections.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Brain className="h-5 w-5" />
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>AI-generated collections based on bookmark patterns</p>
                      </TooltipContent>
                    </Tooltip>
                    Smart Collections
                    <Badge variant="outline">{smartCollections.length}</Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    {smartCollections.map((collection) => (
                      <CollectionCard
                        key={collection.id}
                        collection={collection}
                        compactMode={compactMode}
                        isExpanded={expandedCollections.has(collection.id)}
                        onToggleExpanded={(isExpanded) => updateExpandedCollections(collection.id, isExpanded)}
                        onEdit={handleEdit}
                        onDelete={handleDelete}
                        onToggleFavorite={handleToggleFavorite}
                        onDeleteCollection={handleDeleteCollection}
                        onEditCollection={handleEditCollection}
                      />
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Recent Bookmarks Section */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Clock className="h-5 w-5" />
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>Your most recently saved bookmarks</p>
                    </TooltipContent>
                  </Tooltip>
                  Recent Bookmarks
                </CardTitle>
              </CardHeader>
              <CardContent>
                {recentBookmarks.length === 0 ? (
                  <p className="text-gray-500 dark:text-gray-400">No bookmarks yet.</p>
                ) : (
                  <div className={`grid gap-4 ${compactMode ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4' : 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3'}`}>
                    {recentBookmarks.map((bookmark) => (
                      <BookmarkCard
                        key={bookmark.id}
                        bookmark={bookmark}
                        compact={compactMode}
                        onEdit={handleEdit}
                        onDelete={handleDelete}
                        onToggleFavorite={handleToggleFavorite}
                        onUpdateLastVisited={handleUpdateLastVisited}
                      />
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Forgotten Bookmarks Section */}
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Star className="h-5 w-5" />
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Bookmarks you haven't visited in a while - rediscover them!</p>
                      </TooltipContent>
                    </Tooltip>
                    Forgotten Bookmarks
                  </CardTitle>
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-muted-foreground">Not visited in:</span>
                    <Select value={oldBookmarksDays} onValueChange={setOldBookmarksDays}>
                      <SelectTrigger className="w-24">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="7">7 days</SelectItem>
                        <SelectItem value="30">30 days</SelectItem>
                        <SelectItem value="100">100 days</SelectItem>
                        <SelectItem value="365">365 days</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                {selectedBookmarks.length > 0 && (
                  <div className="mb-4">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          onClick={handleBulkDeleteSelected}
                          variant="destructive"
                          size="sm"
                          className="gap-2"
                        >
                          <Trash2 className="h-4 w-4" />
                          Delete {selectedBookmarks.length} Selected
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Delete all selected bookmarks permanently</p>
                      </TooltipContent>
                    </Tooltip>
                  </div>
                )}
                
                {forgottenBookmarks.length === 0 ? (
                  <p className="text-gray-500 dark:text-gray-400">
                    No bookmarks haven't been visited in {oldBookmarksDays} days.
                  </p>
                ) : (
                  <BookmarkTable
                    bookmarks={forgottenBookmarks}
                    selectedBookmarks={selectedBookmarks}
                    onSelectionChange={setSelectedBookmarks}
                    onEdit={handleEdit}
                    onDelete={handleDelete}
                    onToggleFavorite={handleToggleFavorite}
                    onUpdateLastVisited={handleUpdateLastVisited}
                  />
                )}
              </CardContent>
            </Card>

            {/* Random Bookmark Section */}
            {randomBookmark && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Shuffle className="h-5 w-5" />
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>A randomly selected bookmark from your collection</p>
                      </TooltipContent>
                    </Tooltip>
                    Random Bookmark
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="max-w-md">
                    <BookmarkCard
                      bookmark={randomBookmark}
                      compact={compactMode}
                      onEdit={handleEdit}
                      onDelete={handleDelete}
                      onToggleFavorite={handleToggleFavorite}
                      onUpdateLastVisited={handleUpdateLastVisited}
                    />
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </main>

        <BookmarkDialog
          open={isDialogOpen}
          onOpenChange={(open) => {
            setIsDialogOpen(open);
            if (!open) {
              setEditingBookmark(null);
            }
          }}
          bookmark={editingBookmark}
          onSave={handleBookmarkSave}
        />

        <SmartCollectionEditDialog
          open={isCollectionEditDialogOpen}
          onOpenChange={(open) => {
            setIsCollectionEditDialogOpen(open);
            if (!open) {
              setEditingCollection(null);
            }
          }}
          collection={editingCollection}
          onSave={handleCollectionSave}
        />
      </div>
    </TooltipProvider>
  );
};

export default Hub;
